class EditDistance
{
	public static int minDistance(String s1,String s2,int m,int n)
	{
		//we can either delete insert or replace we need to minimise such number of operations.
		if(n == 0)
			return m;
		if(m == 0)
			return n;
		if(s1.charAt(m-1) == s2.charAt(n-1))
			return minDistance(s1,s2,m-1,n-1);
		//here we are converting s1 to s2
		else
			return 1+Math.min(Math.min(minDistance(s1,s2,m-1,n-1),// replacement
				minDistance(s1,s2,m-1,n)), // deletion
				minDistance(s1,s2,m,n-1)); // insertion
	}
	//dp based solution to the above problem.
	public static int minDistance1(String s1,String s2)
	{
		int n = s1.length();
		int m = s2.length();
		int dp[][] = new int[n+1][m+1];
		//dp[i][j] mindistance btween s1 of 0-i-1 and s2 0-j-1
		//these two are similar to the base cases in recursion.
		//empty string with not empty string
		for(int i=0;i<=m;i++)
			dp[0][i] = i;
		//empty string with not empty string
		for(int i=0;i<=n;i++)
			dp[i][0] = i;
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=m;j++)
			{
				if(s1.charAt(i-1) == s2.charAt(j-1))
					dp[i][j] = dp[i-1][j-1];
				else
					dp[i][j] = 1+Math.min(Math.min(dp[i-1][j-1],dp[i-1][j]),dp[i][j-1]);
			}
		}	 

		return dp[n][m];


	}

}
