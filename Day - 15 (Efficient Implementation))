class Solution {
    // kadane's algorithm
    static int maxNormalSum(int[] arr)
    {
        int n = arr.length;
        int max_sum = arr[0];
        int max_ending = arr[0];
        for(int i=1;i<n;i++)
        {
            max_ending = Math.max(max_ending+arr[i],arr[i]);
            max_sum = Math.max(max_ending,max_sum);
        }
        return max_sum;
    }
    public int maxSubarraySumCircular(int[] arr) {
        int normalSum = maxNormalSum(arr);
        if(normalSum < 0)
            return normalSum;
        int n = arr.length;
        int arr_sum = 0;
        for(int i=0;i<n;i++)
        {
            arr_sum += arr[i];
            //invert the array
            arr[i] = -arr[i];
        }
        int maxCircularSum = arr_sum+maxNormalSum(arr);
        return Math.max(normalSum,maxCircularSum);
        
    }
}
